import { Knob } from "knob.slint";
import { AmpProps, ChangeObserver } from "utilities.slint";
import { TabWidget } from "std-widgets.slint";

export component Amplifier inherits Rectangle {
    in property <color> accent-color;
    in-out property <float> gain: 1.0;
    in-out property <float> attack: 0.0;
    in-out property <float> decay: 0.0;
    in-out property <float> sustain: 1.0;
    in-out property <float> release: 0.0;

    pure callback changed(AmpProps, float);
    border-radius: 10px;
    background: @linear-gradient(0deg, #4f5d6e 0%, #939aa3 100%);
    min-height: 480px;

    VerticalLayout {
        padding: 10px;
        spacing: 20px;
        alignment: center;

        gain_knob := Knob {
            text: "GAIN (dB)";
            value <=> root.gain;
            progress: (self.value + 60) / 60;

            size: 200px;
            accent-color: root.accent-color;

            changed => {
                self.value = self.progress * 60 - 60;
                root.changed(AmpProps.gain, self.value);
            }
            double-clicked => {
                self.value = 0;
                self.progress = (self.value + 60) / 60;
            }
            text_input_accepted(s) => {
                self.value = max(-60, min(0, s.to-float()));
                self.progress = (self.value + 60) / 60;
            }
        }

        tabs := TabWidget {
            Tab { //0
                title: "MIDI";
            }
            Tab { //1
                title: "Constant";
            }
        }

        // Slint's built-in TabWidget has no callback for listening for the active tab to
        // change. This solution is thanks to user maurges's solution in discussion post #4717
        // on Slint's GitHub repository.
        ChangeObserver {
            value: tabs.current-index;

            changed(v, f) => {
                root.changed(AmpProps.mode, v);

                return f;
            }
        }

        GridLayout {
            spacing: 10px;

            Row {
                attack_knob := Knob {
                    text: "ATTACK (ms)";
                    value <=> root.attack;
                    progress: self.value / 1000;

                    size: 150px;
                    accent-color: root.accent-color;

                    changed => {
                        self.value = self.progress * 1000;
                        root.changed(AmpProps.attack, attack_knob.value / 100);
                    }
                    double-clicked => {
                        self.value = 0;
                        self.progress = self.value / 1000;
                    }
                    text_input_accepted(s) => {
                        self.value = max(0, min(1000, s.to-float()));
                        self.progress = self.value / 1000;
                    }
                } // attack_knob
                decay_knob := Knob {
                    text: "DECAY (ms)";
                    value <=> root.decay;
                    progress: self.value / 1000;

                    size: 150px;
                    accent-color: root.accent-color;

                    changed => {
                        self.value = self.progress * 1000;
                        root.changed(AmpProps.decay, self.value / 100);
                    }
                    double-clicked => {
                        self.value = 0;
                        self.progress = self.value / 1000;
                    }
                    text_input_accepted(s) => {
                        self.value = max(0, min(1000, s.to-float()));
                        self.progress = self.value / 1000;
                    }
                } // decay_knob
            }
            Row {
                sustain_knob := Knob {
                    text: "SUSTAIN";
                    value <=> root.sustain;
                    progress: self.value;

                    size: 150px;
                    accent-color: root.accent-color;

                    changed => {
                        self.value = self.progress;
                        root.changed(AmpProps.sustain, self.value);
                    }
                    double_clicked => {
                        self.value = 1;
                        self.progress = self.value;
                    }
                    text_input_accepted(s) => {
                        self.value = max(0, min(1, s.to-float()));
                        self.progress = self.value;
                    }
                } // sustain_knob
                release_knob := Knob {
                    text: "RELEASE (ms)";
                    value <=> root.release;
                    progress: self.value / 1000;

                    size: 150px;
                    accent-color: root.accent-color;

                    changed => {
                        self.value = self.progress * 1000;
                        root.changed(AmpProps.release, self.value / 100);
                    }
                    double_clicked => {
                        self.value = 0;
                        self.progress = self.value / 1000;
                    }
                    text_input_accepted(s) => {
                        self.value = max(0, min(1000, s.to-float()));
                        self.progress = self.value / 1000;
                    }
                } // release_knob
            }
        }
    }
}