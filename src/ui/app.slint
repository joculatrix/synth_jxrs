import { Oscillator } from "oscillator.slint";
import { AmpProps, OscProps, Logic } from "utilities.slint";
import { Knob } from "knob.slint";
import { Amplifier } from "amplifier.slint";
import { Button } from "std-widgets.slint";

export component MainWindow inherits Window {
    property <float> master: 1.0;

    pure callback amp_prop_changed(AmpProps, float);
    pure callback osc_prop_changed(int, OscProps, float);
    pure callback midi_reset;
    // re-expose set_precision so it can be defined in app.rs:
    pure callback set_precision <=> Logic.set_precision;

    title: "synth_jxrs";
    background: @linear-gradient(0deg, #000000 0%, #171a1d 100%);

    VerticalLayout {
        padding: 20px;
        spacing: 10px;

        HorizontalLayout {
            spacing: 10px;
    
            GridLayout {
                spacing: 10px;
    
                Row {
                    osc1 := Oscillator {
                        accent-color: @linear-gradient(0deg, #0768b8 0%, #16b4e4 100%);
                        id: 1;
            
                        changed(prop, val) => {
                            root.osc_prop_changed(self.id - 1, prop, val);
                        }
                    }
                    osc2 := Oscillator {
                        accent-color: @linear-gradient(0deg, #aa0a6d 0%, #db2cc4 100%);
                        id: 2;
            
                        changed(prop, val) => {
                            root.osc_prop_changed(self.id - 1, prop, val);
                        }
                    }
                }
                Row {
                    osc3 := Oscillator {
                        accent-color: @linear-gradient(0deg, #da460c 0%, #e76a17 100%);
                        id: 3;
            
                        changed(prop, val) => {
                            root.osc_prop_changed(self.id - 1, prop, val);
                        }
                    }
                    osc4 := Oscillator {
                        accent-color: @linear-gradient(0deg, #06bd52 0%, #28fa56 100%);
                        id: 4;
    
                        changed(prop, val) => {
                            root.osc_prop_changed(self.id - 1, prop, val);
                        }
                    }
                }
            }
            amp := Amplifier {
                accent-color: white;
    
                changed(prop, val) => {
                    root.amp_prop_changed(prop, val);
                }
            }
        }

        HorizontalLayout {
            Rectangle {}
            Rectangle {}
            Rectangle {
                height: 24px;

                Button {
                    text: "Reset MIDI";

                    clicked => { root.midi_reset(); }
                }
            }
        }
    }
}