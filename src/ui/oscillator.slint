import { ComboBox, Switch, TabWidget } from "std-widgets.slint";
import { ChangeObserver, OscProps } from "utilities.slint";
import { Knob } from "knob.slint";

export component Oscillator inherits Rectangle {
    in-out property <float> frequency: 440;
    in-out property <float> pitch_coarse: 0;
    in-out property <float> pitch_fine: 0;
    in-out property <float> gain: 0;
    in property <int> id;
    in property <color> accent-color: blue;

    pure callback changed(OscProps, float);

    border-radius: 10px;
    background: @linear-gradient(0deg, #191e24 0%, #242729 100%);

    GridLayout {
        padding: 10px;
        spacing: 10px;

        Row {
            Text {
                text: "OSC \{root.id}";
                color: root.accent-color;
                font-weight: 900;
                font-size: 16px;

                stroke: black;
                stroke-width: 0px;
            }
        }
        Row {
            Switch {
                toggled => {
                    // switch on = oscillator on, bypass off; switch off = oscillator off, bypass on
                    self.checked ? root.changed(OscProps.bypass, 0) : root.changed(OscProps.bypass, 1);
                }
            }
            ComboBox {
                max-height: 20px;

                model: ["Noise", "Saw", "Sine", "Square", "Triangle"];
                current-value: "Sine";

                selected(s) => {
                    root.changed(OscProps.waveform, self.current-index);
                }
            }
        }

        Row {
            tabs := TabWidget {
                Tab { // 0
                    title: "MIDI";

                    HorizontalLayout {
                        alignment: center;
                        spacing: 20px;

                        coarse_detune := Knob {
                            text: "PITCH";
                            value <=> root.pitch_coarse;
                            progress: 0.5 + (self.value / 24);
                            size: 150px;
                            accent-color: root.accent-color;
    
                            changed => {
                                self.value = floor((self.progress - 0.5) * 24);
                                root.changed(OscProps.coarse, floor(self.value));
                            }
                            double-clicked => {
                                self.value = 0;
                                self.progress = 0.5 + (self.value / 24);
                                root.changed(OscProps.coarse, (self.value / 100));
                            }
                            text_input_accepted(s) => {
                                self.value = floor(max(-12, min(12, s.to-float())));
                                self.progress = 0.5 + (self.value / 24);
                            }
                        }

                        fine_detune := Knob {
                            text: "FINE";
                            value <=> root.pitch_fine;
                            progress: 0.5 + (self.value / 50);
                            size: 125px;
                            accent-color: root.accent-color;
    
                            changed => {
                                self.value = (self.progress - 0.5) * 50;
                                root.changed(OscProps.fine, (self.value / 100));
                            }
                            double-clicked => {
                                self.value = 0;
                                self.progress = 0.5 + (self.value / 50);
                                root.changed(OscProps.fine, (self.value / 100));
                            }
                            text_input_accepted(s) => {
                                self.value = max(-50, min(50, s.to-float()));
                                self.progress = 0.5 + (self.value / 50);
                            }
                        }
                    }
                }
                Tab { // 1
                    title: "Constant";

                    freq_knob := Knob {
                        text: "FREQ";
                        value <=> root.frequency;
                        progress: ((self.value) - 10.0) * 0.0005;
                        size: 150px;
                        accent-color: root.accent-color;

                        changed => {
                            self.value = self.progress / 0.0005 + 10.0;
                            root.changed(OscProps.freq, self.value);
                        }
                        double-clicked => {
                            self.value = 440;
                            self.progress = ((self.value) - 10.0) * 0.0005;
                        }
                        text_input_accepted(s) => {
                            self.value = max(10, min(2010, s.to-float()));
                            self.progress = ((self.value) - 10.0) * 0.0005;
                        }
                    }
                }
            } // tabs
            gain_rect := Rectangle {
                max-width: 250px;

                gain_knob := Knob {
                    text: "GAIN (dB)";
                    value <=> root.gain;
                    progress: (self.value + 60) / 60;
    
                    size: 200px;
                    accent-color: root.accent-color;

                    x: (gain_rect.width / 2) - (self.width / 2);
    
                    changed => {
                        self.value = self.progress * 60 - 60;
                        root.changed(OscProps.gain, self.value);
                    }
                    double-clicked => {
                        self.value = 0;
                        self.progress = (self.value + 60) / 60;
                    }
                    text_input_accepted(s) => {
                        self.value = max(-60, min(0, s.to-float()));
                        self.progress = (self.value + 60) / 60;
                    }
                }
            }
        }
    } // GridLayout

    // Slint's built-in TabWidget has no callback for listening for the active tab to
    // change. This solution is thanks to user maurges's solution in discussion post #4717
    // on Slint's GitHub repository.
    ChangeObserver {
        value: tabs.current-index;

        changed(v, f) => {
            root.changed(OscProps.mode, v);

            return f;
        }
    }
}